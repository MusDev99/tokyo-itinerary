---
import '../styles/global.css';
import '../styles/autumn-bg.css';
import '../styles/winter-bg.css';
import '../styles/spring-bg.css';
import '../styles/summer-bg.css';
import ThemeSwitcher from '../components/ThemeSwitcher';

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="min-h-screen bg-transparent">
    <!-- Theme Switcher Component -->
    <div class="fixed bottom-4 right-4 z-20">
      <ThemeSwitcher client:load />
    </div>

    <!-- Theme Backgrounds -->
    <div id="theme-background">
      <div class="autumn-bg hidden" data-theme="autumn">
        {Array.from({ length: 20 }).map((_, i) => (
          <div class="leaf" />
        ))}
      </div>
      <div class="winter-bg hidden" data-theme="winter">
        {Array.from({ length: 20 }).map((_, i) => (
          <div class="snowflake" />
        ))}
      </div>
      <div class="spring-bg hidden" data-theme="spring">
        {Array.from({ length: 20 }).map((_, i) => (
          <div class="petal" />
        ))}
      </div>
      <div class="summer-bg hidden" data-theme="summer">
        {Array.from({ length: 10 }).map((_, i) => (
          <div class="sun-ray" />
        ))}
        {Array.from({ length: 10 }).map((_, i) => (
          <div class="beach-ball" />
        ))}
      </div>
    </div>

    <!-- Main Content -->
    <div class="relative z-10">
      <slot />
    </div>

    <!-- Theme Switching Script -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Set initial theme from localStorage or default to autumn
        const savedTheme = localStorage.getItem('theme') || 'autumn';
        document.documentElement.setAttribute('data-theme', savedTheme);
        
        // Show background for current theme
        const initialBg = document.querySelector(`.${savedTheme}-bg`);
        if (initialBg) {
          initialBg.classList.remove('hidden');
        }
        
        // Listen for theme changes
        document.addEventListener('theme-changed', (e: any) => {
          const event = e;  // TypeScript workaround
          const theme = event.detail?.theme;
          
          if (!theme) return;
          // Hide all backgrounds
          document.querySelectorAll('#theme-background > div').forEach(el => {
            el.classList.add('hidden');
          });
          
          // Show background for new theme
          const newBg = document.querySelector(`.${theme}-bg`);
          if (newBg) {
            newBg.classList.remove('hidden');
          }
        });
      });
    </script>
  </body>
</html>
